from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext

from bot.models import Salon, Service
from telegram_bot.utils.reply_or_edit import reply_or_edit
from telegram_bot.utils.calendar_tools import parse_date_from_str
from telegram_bot.utils.registration import get_available_masters


def show_master_selection_after_slot(update: Update, context: CallbackContext) -> None:
    salon_id = context.user_data.get("selected_salon_id")
    service_id = context.user_data.get("selected_service_id")
    slot = context.user_data.get("selected_slot")
    date_str = context.user_data.get("selected_date")


    if not all([salon_id, service_id, slot, date_str]):
        reply_or_edit(update, "–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    selected_date = parse_date_from_str(date_str)

    try:
        salon = Salon.objects.get(id=salon_id)
        service = Service.objects.get(id=service_id)
    except (Salon.DoesNotExist, Service.DoesNotExist):
        reply_or_edit(update, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–∞–ª–æ–Ω–∞ –∏–ª–∏ —É—Å–ª—É–≥–∏.")
        return

    masters = get_available_masters(salon, service, selected_date, slot)

    if not masters:
        reply_or_edit(update, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤.")
        return

    buttons = [
        [InlineKeyboardButton(f"üë§ {master.name}", callback_data=f"select_master_{master.id}")]
        for master in masters
    ]
    buttons.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_slots")])

    reply_markup = InlineKeyboardMarkup(buttons)
    reply_or_edit(update, "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞, –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤ —ç—Ç–æ –≤—Ä–µ–º—è:", reply_markup=reply_markup)


def show_service_selection(update: Update, context: CallbackContext) -> None:
    master_id = context.user_data.get("selected_master_id")
    if master_id:
        services = Service.objects.filter(master__id=master_id)
    else:
        services = Service.objects.all()

    if not services.exists():
        reply_or_edit(update, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä.")
        return

    buttons = [
        [InlineKeyboardButton(
            text=f"{service.treatment} ‚Äî {int(service.price):,} ‚ÇΩ".replace(",", " "),
            callback_data=f"select_service_{service.id}"
        )] for service in services
    ]

    flow = context.user_data.get("flow")

    if flow == "by_master":
        back_callback = "back_to_dates"
    else:
        back_callback = "back_to_salons"

    buttons.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=back_callback)])

    reply_markup = InlineKeyboardMarkup(buttons)
    reply_or_edit(update, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—É:", reply_markup=reply_markup)


def show_salon_selection(update, context):
    context.user_data["flow"] = "by_salon"
    salons = Salon.objects.all()

    if not salons.exists():
        reply_or_edit(update, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∞–ª–æ–Ω–æ–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏.")
        return

    buttons = [
        [InlineKeyboardButton(salon.address, callback_data=f"select_salon_{salon.id}")]
        for salon in salons
    ]
    reply_or_edit(update, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∞–ª–æ–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏:", reply_markup=InlineKeyboardMarkup(buttons))
