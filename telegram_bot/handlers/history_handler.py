from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import CallbackContext, MessageHandler, Filters, CallbackQueryHandler
from bot.models import Registration
from telegram_bot.utils.reply_or_edit import reply_or_edit
from telegram_bot.utils.main_menu import send_main_menu
from django.utils import timezone


def get_history_handlers():
    return [
        MessageHandler(Filters.text("üìã –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–µ–π"), show_client_history),
        CallbackQueryHandler(handle_history_filter, pattern=r"^history_"),
        CallbackQueryHandler(handle_main_menu, pattern="^main_menu$"),
    ]


def show_client_history(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞."""
    buttons = [
        [InlineKeyboardButton("‚è≥ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏", callback_data="history_active")],
        [InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏", callback_data="history_completed")],
        [InlineKeyboardButton("üìã –í—Å–µ –∑–∞–ø–∏—Å–∏", callback_data="history_all")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    reply_or_edit(update, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", 
                 reply_markup=InlineKeyboardMarkup(buttons))


def handle_history_filter(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø–∏—Å–µ–π."""
    query = update.callback_query
    query.answer()
    
    if query.data == "history_back":
        show_client_history(update, context)
        return
    
    tg_user = update.effective_user
    now = timezone.now().date()
    
    if query.data == "history_active":
        registrations = Registration.objects.filter(
            client__tg_id=tg_user.id,
            service_date__gte=now
        )
        title = "‚è≥ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏"
    elif query.data == "history_completed":
        registrations = Registration.objects.filter(
            client__tg_id=tg_user.id,
            service_date__lt=now
        )
        title = "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏"
    else:  # history_all
        registrations = Registration.objects.filter(client__tg_id=tg_user.id)
        title = "üìã –í—Å–µ –∑–∞–ø–∏—Å–∏"
    
    registrations = registrations.select_related('master', 'salon', 'service').order_by('-service_date', '-slot')
    
    if not registrations.exists():
        buttons = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º", callback_data="history_back")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_or_edit(update, f"–£ –≤–∞—Å –Ω–µ—Ç {title.lower()}.", reply_markup=InlineKeyboardMarkup(buttons))
        return
    
    message = f"{title}:\n\n"
    for reg in registrations:
        status = "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞" if reg.service_date < now else "‚è≥ –û–∂–∏–¥–∞–µ—Ç"
        payment_status = "üí≥ –û–ø–ª–∞—á–µ–Ω–æ" if reg.is_paid else "üí∞ –ù–µ –æ–ø–ª–∞—á–µ–Ω–æ"
        message += (
            f"üìÖ {reg.service_date.strftime('%d.%m.%Y')} –≤ {reg.slot}\n"
            f"üë§ {reg.master.name}\n"
            f"üè† {reg.salon.address}\n"
            f"üíá {reg.service.treatment}\n"
            f"üìä {status}\n"
            f"üí≥ {payment_status}\n\n"
        )
    
    buttons = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º", callback_data="history_back")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_or_edit(update, message, reply_markup=InlineKeyboardMarkup(buttons))


def handle_main_menu(update: Update, context: CallbackContext) -> None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    query = update.callback_query
    query.answer()
    send_main_menu(update, context)
