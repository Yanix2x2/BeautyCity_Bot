import os
from decimal import Decimal
from telegram import Update, LabeledPrice, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, CallbackQueryHandler, PreCheckoutQueryHandler, MessageHandler, Filters

from bot.models import Registration
from telegram_bot.utils.reply_or_edit import reply_or_edit
from telegram_bot.utils.main_menu import send_main_menu


def get_payment_handlers():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π"""
    return [
        CallbackQueryHandler(handle_payment_callback, pattern=r"^(pay_registration_|pay_later)"),
        PreCheckoutQueryHandler(precheckout_callback),
        MessageHandler(Filters.successful_payment, handle_successful_payment),
        MessageHandler(Filters.text("‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞"), handle_failed_payment),
    ]


def offer_payment_after_registration(update: Update, context: CallbackContext, registration: Registration) -> None:
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –æ–ø–ª–∞—Ç—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–ø–∏—Å–∏"""
    try:
        buttons = [
            [InlineKeyboardButton(
                f"üí≥ –û–ø–ª–∞—Ç–∏—Ç—å {registration.service.price} ‚ÇΩ", 
                callback_data=f"pay_registration_{registration.pk}"
            )],
            [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–∑–∂–µ", callback_data="pay_later")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(buttons)
        
        message = (
            f"‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            f"üìã –î–µ—Ç–∞–ª–∏ –∑–∞–ø–∏—Å–∏:\n"
            f"‚Ä¢ –£—Å–ª—É–≥–∞: {registration.service.treatment}\n"
            f"‚Ä¢ –ú–∞—Å—Ç–µ—Ä: {registration.master.name}\n"
            f"‚Ä¢ –î–∞—Ç–∞: {registration.service_date}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {registration.slot}\n"
            f"‚Ä¢ –°–∞–ª–æ–Ω: {registration.salon.address}\n"
            f"‚Ä¢ –°—É–º–º–∞: {registration.service.price} ‚ÇΩ\n\n"
            f"üí≥ –•–æ—Ç–∏—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å —Å–µ–π—á–∞—Å?"
        )
        
        reply_or_edit(update, message, reply_markup=reply_markup)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã: {e}")
        send_main_menu(update, context, "–ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞! –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.")


def handle_payment_callback(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback'–∏ –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π"""
    query = update.callback_query
    query.answer()
    
    if query.data.startswith("pay_registration_"):
        registration_id = int(query.data.replace("pay_registration_", ""))
        handle_pay_registration(update, context, registration_id)
        
    elif query.data == "pay_later":
        handle_pay_later(update, context)
        
    elif query.data == "main_menu":
        send_main_menu(update, context)


def handle_pay_registration(update: Update, context: CallbackContext, registration_id: int) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É –∑–∞–ø–∏—Å–∏"""
    try:
        registration = Registration.objects.get(pk=registration_id)
        
        context.bot.send_invoice(
            chat_id=update.effective_chat.id,
            title=f"–û–ø–ª–∞—Ç–∞ –∑–∞–ø–∏—Å–∏ ‚Ññ{registration.pk}",
            description=(
                f"–£—Å–ª—É–≥–∞: {registration.service.treatment}\n"
                f"–ú–∞—Å—Ç–µ—Ä: {registration.master.name}\n"
                f"–î–∞—Ç–∞: {registration.service_date}\n"
                f"–í—Ä–µ–º—è: {registration.slot}\n"
                f"–°–∞–ª–æ–Ω: {registration.salon.address}"
            ),
            payload=f"payment_registration_{registration.pk}",
            provider_token=os.getenv("TELEGRAM_PROVIDER_TOKEN"),
            currency="RUB",
            prices=[LabeledPrice(
                label=registration.service.treatment, 
                amount=int(registration.service.price * 100)  # –°—É–º–º–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö
            )],
            start_parameter="beauty_city_payment"
        )
        
        reply_or_edit(
            update,
            f"üí≥ –°–æ–∑–¥–∞–Ω —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–∞–ø–∏—Å–∏ ‚Ññ{registration.pk}\n\n"
            f"–°—É–º–º–∞: {registration.service.price} ‚ÇΩ\n"
            f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û–ø–ª–∞—Ç–∏—Ç—å' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞."
        )
            
    except Registration.DoesNotExist:
        buttons = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(buttons)
        reply_or_edit(update, "‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=reply_markup)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        buttons = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(buttons)
        reply_or_edit(update, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.", reply_markup=reply_markup)


def handle_pay_later(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω—É—é –æ–ø–ª–∞—Ç—É"""
    reply_or_edit(
        update,
        "üí≥ –û–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –≤ —Å–∞–ª–æ–Ω–µ –ø—Ä–∏ –ø–æ—Å–µ—â–µ–Ω–∏–∏.\n\n"
        "–ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n"
        "–ñ–¥–µ–º –≤–∞—Å –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è."
    )
    send_main_menu(update, context)


def precheckout_callback(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–∞"""
    query = update.pre_checkout_query
    if query.invoice_payload.startswith("payment_registration_"):
        query.answer(ok=True)
    else:
        query.answer(ok=False, error_message="–û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π payload.")


def handle_successful_payment(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂"""
    try:
        payload = update.message.successful_payment.invoice_payload
        registration_id = int(payload.replace("payment_registration_", ""))
        
        registration = Registration.objects.get(pk=registration_id)
        
        registration.is_paid = True
        registration.save()
        
        reply_or_edit(
            update, 
            f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n\n"
            f"–ó–∞–ø–∏—Å—å ‚Ññ{registration.pk} –æ–ø–ª–∞—á–µ–Ω–∞.\n"
            f"–°—É–º–º–∞: {registration.service.price} ‚ÇΩ\n\n"
            f"–ñ–¥–µ–º –≤–∞—Å {registration.service_date} –≤ {registration.slot}!"
        )
        
    except (Registration.DoesNotExist, ValueError) as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        buttons = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(buttons)
        reply_or_edit(update, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", reply_markup=reply_markup)
    except Exception as e:
        print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        buttons = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(buttons)
        reply_or_edit(update, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", reply_markup=reply_markup)


def handle_failed_payment(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ—É–¥–∞—á–Ω—É—é –æ–ø–ª–∞—Ç—É"""
    reply_or_edit(
        update,
        "‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    )
    send_main_menu(update, context)
